let mongoose,bcrypt;_b93‍.x([["default",()=>_b93‍.o]]);_b93‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_b93‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);

const {Schema} = mongoose;

const userSchema = new Schema({
    name: {
        type: String,
        trim: true,
        required: "Name is required"
    },
    email: {
        type: String,
        trim: true,
        required: "Email is required",
        unique: true
    },
    password: {
        type: String,
        required: true,
        min: 6,
        max: 20
    },
    stripe_account_id: "",
    stripe_seller: {},
    stripeSession:{}

},
{timestamps: true}
);

//"pre" middlewares
userSchema.pre("save", function(next){
    let user = this;
    if(user.isModified("password")){
        return bcrypt.hash(user.password, 12, function(err, hash){
            if(err){
                _b93‍.g.console.log("BCRYPT ERR===> " + err)
                return next(err);
            }
            else{
                user.password = hash;
                return next();
            }
        })
    }
    else{
        return next();
    } 

});
//checking the password
userSchema.methods("comparePassword", function(password, next){
    bcrypt.compare(password, this.password, function(err, match){
        if (err){
            console.log(`PASSWORDS DO NOT MATCH ===> ${err}`);
            return next(err, false);
        }
        
            _b93‍.g.console.log("PASSWORDS MATCH", match);
            return next(null, match)
        
    });
});


_b93‍.d(mongoose.model("User", userSchema));