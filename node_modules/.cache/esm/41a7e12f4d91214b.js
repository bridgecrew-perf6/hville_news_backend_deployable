let User;_4d9‍.x([["createUser",()=>createUser],["login",()=>login]]);_4d9‍.w("../models/user",[["default",["User"],function(v){User=v}]]);

       const createUser= async (req, res)=>{
    _4d9‍.g.console.log(req.body);
    const {name, email, password} = req.body;
    //validation
    if(!name) return res.status(400).send("Name feild is required");
    if(!password || password.length < 6 || password.length > 20){
         return res.status(400)
         .send("Password feild is required, being between 6 and 20 characters long.");
    }
    let userExist = await User.findOne({email: email}).exec();
    if (userExist) return res.status(400).send("Email already exists");
    const user = new User(req.body);
    try{
        await user.save();
        console.log(`USER CREATED SUCCESSFULLY ==> ${user}`);
        return res.json({user: user});
    }
    catch(err){
        console.log(`COULD NOT CREATE USER ===> ${err}`);
        return res.status(400).send("Error, try again.")
    }

}

       const login = async (req, res) =>{
    _4d9‍.g.console.log(req.body);
    const {email, password} = req.body;
    try{
        let user = User.findOne({email}).exec();
        if(!user){
           return res.status(400).send("user with that email does not exist.")
        }
        else{
            _4d9‍.g.console.log(user)
            User.comparePassword(password, (err, match)=>{
                if(!match || err){
                    return res.status(400).send("Password Incorrect");  
                }
            })
        }

    }
    catch(err){
        console.log(`login error ${err}`);
        res.status(400).send("Login has failed.")
    }
}